#!/usr/bin/env python3
import random

import cv2
import mediapipe as mp

vid = cv2.VideoCapture(0)
vid.set(3, 940)
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7, min_tracking_confidence=0.7)
mp_draw = mp.solutions.drawing_utils
is_pinched = False
has_to_draw = False
has_won = False

ROWS = 4
COLS = 5
cards = [i for i in range(10) for j in range(2)]
random.shuffle(cards)
CARD_VAL_GRID = [cards[i * len(cards) // ROWS:(i + 1) * len(cards) // ROWS] for i in range(ROWS)]
CARD_GRID = [[] for i in range(ROWS)]
CARD_HEIGHT = 200
CARD_WIDTH = 150
print(CARD_VAL_GRID)
cx, cy = 0, 0
posX, posY = 0, 0

GRID_BASE = 200
GRID_INTERVAL = 50

first_card = (-1, -1)
second_card = (-1, -1)

while True:
    success, r_img = vid.read()
    img = cv2.flip(r_img, 1)
    if all([CARD_VAL_GRID[i][j] == -1 for i in range(ROWS) for j in range(COLS)]):
        cv2.rectangle(img, (0, 0), (img.shape[1], img.shape[0]), (255, 255, 255), -1)
        cv2.putText(img, "Vous avez gagne !",
                    (500, 500),
                    cv2.FONT_HERSHEY_COMPLEX, 2, (0, 0, 0), 5)
        has_won = True
    cv2.putText(img, "Appuyez sur 'q' pour quitter",
                (10, 30),
                cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 3)
    RGB_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(RGB_img)
    if not has_won:
        for r in range(ROWS):
            for c in range(COLS):
                top_left_y = r * CARD_HEIGHT
                top_left_x = c * CARD_WIDTH
                bottom_right_y = top_left_y + CARD_HEIGHT
                bottom_right_x = top_left_x + CARD_WIDTH

                cv2.rectangle(img, (GRID_BASE + top_left_x + GRID_INTERVAL, GRID_BASE + top_left_y + GRID_INTERVAL),
                              (GRID_BASE + bottom_right_x, GRID_BASE + bottom_right_y),
                              CARD_VAL_GRID[r][c] == -1 and (255, 255, 255) or (255, 255, 0),
                              -1)
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(img, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            for i, lm in enumerate(hand_landmarks.landmark):
                h, w, c = img.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                if i == 4:
                    Tx, Ty = cx, cy
                    cv2.circle(img, (Tx, Ty), 5, (0, 0, 255), cv2.FILLED)

                if i == 8:
                    cv2.circle(img, (cx, cy), 5, (0, 0, 255), cv2.FILLED)
                    line = cv2.line(img, (cx, cy), (Tx, Ty), (0, 255, 0), 1)
                    if line.shape[1] > 0:
                        length = ((cx - Tx) ** 2 + (cy - Ty) ** 2) ** 0.5
                        if length < 50 and not is_pinched:
                            print("Pinched")
                            print(cx, cy)
                            is_pinched = True
                            print("Pinched on card")
                            posX = ((cx - GRID_BASE - GRID_INTERVAL) // 75) // 2
                            posY = ((cy - GRID_BASE - GRID_INTERVAL) // 100) // 2
                            print(posX, posY)
                            has_to_draw = True
                        elif length > 100 and is_pinched:
                            is_pinched = False

                        prev_cx, prev_cy = cx, cy
    else:
        is_pinched = False

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    if has_to_draw:
        if posY > ROWS - 1 or posX > COLS - 1:
            has_to_draw = False
            continue
        elif posY < 0 or posX < 0:
            has_to_draw = False
            continue
        else:
            if second_card == (-1, -1):
                print("First card == -1")
                second_card = (posY, posX)
                has_to_draw = False
                continue
            elif first_card == (-1, -1):
                first_card = (posY, posX)
                has_to_draw = False

    if first_card != (-1, -1):
        top_left_y = first_card[0] * CARD_HEIGHT
        top_left_x = first_card[1] * CARD_WIDTH
        centerX = CARD_WIDTH // 2
        centerY = CARD_HEIGHT // 2
        if CARD_VAL_GRID[first_card[0]][first_card[1]] == -1:
            cv2.putText(img, f"{CARD_VAL_GRID[posY][posX]}",
                        (GRID_BASE + top_left_x + GRID_INTERVAL // 2 + centerX,
                         GRID_BASE + top_left_y + GRID_INTERVAL // 2 + centerY),
                        cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 3)
        else:
            cv2.putText(img, f"{CARD_VAL_GRID[first_card[0]][first_card[1]]}",
                    (GRID_BASE + top_left_x + GRID_INTERVAL // 2 + centerX,
                     GRID_BASE + top_left_y + GRID_INTERVAL // 2 + centerY),
                    cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 3)

    if second_card != (-1, -1):
        centerX = CARD_WIDTH // 2
        centerY = CARD_HEIGHT // 2
        top_left_y = second_card[0] * CARD_HEIGHT
        top_left_x = second_card[1] * CARD_WIDTH
        if CARD_VAL_GRID[second_card[0]][second_card[1]] == -1:
            cv2.putText(img, "",
                        (GRID_BASE + top_left_x + GRID_INTERVAL // 2 + centerX,
                         GRID_BASE + top_left_y + GRID_INTERVAL // 2 + centerY),
                        cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 3)
        else:
            cv2.putText(img, f"{CARD_VAL_GRID[second_card[0]][second_card[1]]}",
                    (GRID_BASE + top_left_x + GRID_INTERVAL // 2 + centerX,
                     GRID_BASE + top_left_y + GRID_INTERVAL // 2 + centerY),
                    cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 3)

    if first_card != (-1, -1) and second_card != (-1, -1):
        print(f"First card DIFF: {first_card}")
        print(f"Second card DIFF: {second_card}")
        if CARD_VAL_GRID[first_card[0]][first_card[1]] == CARD_VAL_GRID[second_card[0]][second_card[1]]:
            print(
                f"Matched {CARD_VAL_GRID[first_card[0]][first_card[1]]} and {CARD_VAL_GRID[second_card[0]][second_card[1]]}")
            CARD_VAL_GRID[first_card[0]][first_card[1]] = -1
            CARD_VAL_GRID[second_card[0]][second_card[1]] = -1
            first_card = (-1, -1)
            second_card = (-1, -1)
        else:
            print("Not matched")
            first_card = (-1, -1)
            second_card = (-1, -1)

    cv2.waitKey(1)
    cv2.imshow("Memo", img)
